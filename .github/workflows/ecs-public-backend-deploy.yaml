name: Deploy to ECS (Public Backend)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.PRISMA_SUBMODULE_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        working-directory: ./backend-public
        run: npm install --legacy-peer-deps

      - name: Copy Prisma Schema
        run: |
          mkdir -p backend-public/prisma
          cp prisma/schema.prisma backend-public/prisma/

      - name: Run Tests
        working-directory: ./backend-public
        run: npm test -- --passWithNoTests

      - name: Build Docker Image
        working-directory: ./backend-public
        run: |
          docker build --no-cache -t ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker Image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Set image tag output
        id: set-tag
        run: echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout Repository (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.PRISMA_SUBMODULE_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition and Service
        id: ecs-update
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition "${{ secrets.ECS_TASK_DEFINITION }}" --query 'taskDefinition' --output json)
          echo "Image tag from build: ${{ needs.build.outputs.image_tag }}"
          NEW_TASK_DEF=$(echo "$CURRENT_TASK_DEF" | jq --arg IMAGE "${{ secrets.ECR_REPOSITORY }}:${{ needs.build.outputs.image_tag }}" '.containerDefinitions[0].image = $IMAGE')          
          CLEAN_TASK_DEF=$(echo "$NEW_TASK_DEF" | jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo "Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$CLEAN_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"
          echo "Updating ECS service..."
          aws ecs update-service --cluster "${{ secrets.ECS_CLUSTER }}" --service "${{ secrets.ECS_SERVICE }}" --task-definition "$NEW_TASK_DEF_ARN"
          
      - name: Wait for Service Stability
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable --cluster "${{ secrets.ECS_CLUSTER }}" --services "${{ secrets.ECS_SERVICE }}"
