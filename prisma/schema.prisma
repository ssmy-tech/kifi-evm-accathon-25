generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  privyId        String      @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chats[]
  tgApiLink String?
  tgApiSecret String
  dataStatus DataStatus
  enableAutoAlpha Boolean @default(false)
  selectedChatsIds String[] @default([])
  groupCallThreshold Int @default(2)
  slippage Float @default(0.1)
  buyAmount Float @default(0.1)
  trades TokenTrade[]
}

model Chats {
    tgChatId String @id @unique
    tgChatName String?
    tgChatImageUrl String?
    tgChatType ChatType
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    lastProcessedMessageId String?
    lastProcessedAt DateTime?
    users User[]
    messages Messages[]
    calls Calls[]

    @@index([lastProcessedAt])
}

model Messages {
    telegramMessageId String @id @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tgChatId String
    text String?
    fromId Json?
    messageType MessageType @default(Call)
    reason String?
    tgMessageId String
    chat Chats @relation(fields: [tgChatId], references: [tgChatId])
    callId String?
    call Calls? @relation(fields: [callId], references: [telegramCallId])
}

model Calls {
    telegramCallId String @id @unique @map("telegram_call_id")
    address String
    ticker String?
    tokenName String?
    chain Chain
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tgChatId String
    chat Chats @relation(fields: [tgChatId], references: [tgChatId])
    messages Messages[]
    summaryId String?
    summary Summary? @relation(fields: [summaryId], references: [id])
    hasInitialAnalysis Boolean @default(false)
    hasFutureAnalysis Boolean @default(false)
}

model Summary {
    id String @id @unique
    privyId String
    summaryType SummaryType
    Blockchain Chain
    address String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    summary String
    calls Calls[]
}

model TokenTrade {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String
    user User @relation(fields: [userId], references: [privyId])
    tokenAddress String
    chain Chain
    amount String
    status TradeStatus
    entryPrice Float?
    entryTxHash String?
    exitPrice Float?
    exitTxHash String?
    exitReason ExitReason?
    stopLossPrice Float?
    takeProfitPrice Float?
    isMonitoring Boolean @default(false)
    lastChecked DateTime?

    @@index([userId])
    @@index([status])
    @@index([chain])
}

enum TradeStatus {
    PENDING
    ACTIVE
    EXECUTING
    COMPLETED
    FAILED
}

enum ExitReason {
    STOP_LOSS
    TAKE_PROFIT
    MANUAL
}

enum SummaryType {
    Telegram
    Twitter
}

enum Chain {
    BASE
    SOLANA
    MONAD
}

enum DataStatus {
    Private
    Public
}

enum ChatType {
    Channel
    Group
    User
}

enum MessageType {
    Call
    Context
}