# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ApiHealthResponse {
  error: String
  status: String!
}

type ApiSecretResponse {
  apiSecret: String!
}

type AuthPayload {
  createdUser: Boolean!
}

type Call {
  address: String!
  createdAt: DateTime!
  hasFutureAnalysis: Boolean!
  hasInitialAnalysis: Boolean!
  id: String!
  messages: [Message!]!
}

type ChatWithCalls {
  calls: [Call!]!
  chat: TelegramChat!
}

type ChatsResponse {
  chats: [TelegramChat!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetCallsInput {
  address: String
  chain: String
}

type KeyTopic {
  context: String!
  frequency: Float!
  topic: String!
}

type Message {
  createdAt: DateTime!
  fromId: String
  id: String!
  messageType: MessageType!
  reason: String
  text: String
  tgMessageId: String!
}

"""The type of message (Call or Context)"""
enum MessageType {
  Call
  Context
}

type Mutation {
  privyLogin: AuthPayload!
  saveUserChats(input: SaveChatsInput!): ChatsResponse!
  updateTelegramApiLink(apiLink: String!): Boolean!
  updateUserSettings(input: UpdateUserSettingsInput!): UserSettings!
}

type NextStep {
  context: String!
  suggestion: String!
}

type Query {
  checkTelegramApiHealth: ApiHealthResponse!
  getCallsByToken(input: GetCallsInput): TokenCallsResponse!
  getChatPhoto(chatId: String!): String
  getTelegramApiSecret: ApiSecretResponse!
  getTelegramChats: ChatsResponse!
  getTelegramContractAnalytics(input: TelegramContractAnalyticsInput!): TelegramAnalyticsResponse!
  getTwitterContractAnalytics(input: TwitterContractAnalyticsInput!): TwitterAnalyticsResponse!
  getUserSavedChats: ChatsResponse!
  getUserSettings: UserSettings!
  user: User
  whoAmI: String!
}

input SaveChatsInput {
  chatIds: [String!]!
}

type Sentiment {
  communityMood: String!
  details: [String!]!
  overall: String!
}

type TelegramAnalyticsResponse {
  keyTopics: [KeyTopic!]!
  lastGeneratedAt: DateTime!
  nextSteps: [NextStep!]!
  sentiment: Sentiment!
  summary: String!
  timeUntilNextGeneration: Float!
}

type TelegramChat {
  callCount: Float!
  id: String!
  lastCallTimestamp: DateTime
  name: String!
  photoUrl: String
  type: String!
}

input TelegramContractAnalyticsInput {
  contractAddress: String!
}

type TokenCalls {
  address: String!
  chain: String!
  chats: [ChatWithCalls!]!
}

type TokenCallsResponse {
  tokenCalls: [TokenCalls!]!
}

type Tweet {
  author: String!
  engagement: TweetEngagement!
  text: String!
  timestamp: String!
  url: String!
}

type TweetEngagement {
  likes: Float!
  replies: Float!
  retweets: Float!
  views: Float!
}

type TwitterAnalyticsResponse {
  keyTopics: [KeyTopic!]!
  lastGeneratedAt: DateTime!
  nextSteps: [NextStep!]!
  relevantTweets: [Tweet!]!
  sentiment: Sentiment!
  summary: String!
  timeUntilNextGeneration: Float!
}

input TwitterContractAnalyticsInput {
  contractAddress: String!
}

input UpdateUserSettingsInput {
  buyAmount: Float
  enableAutoAlpha: Boolean
  groupCallThreshold: Int
  selectedChatsIds: [String!]
  slippage: Float
}

type User {
  createdAt: DateTime!
  privyId: String!
  tgApiLink: String
  updatedAt: DateTime!
}

type UserSettings {
  buyAmount: Float!
  enableAutoAlpha: Boolean!
  groupCallThreshold: Int!
  selectedChatsIds: [String!]!
  slippage: Float!
}